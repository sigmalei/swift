server(context) ::= <<
<! ================================================================================== !>
<! =                                                                                = !>
<! = service definition                                                             = !>
<! =                                                                                = !>
<! = called from the generator to render a new service java source file.            = !>
<! =                                                                                = !>
<! ================================================================================== !>
<generatedComment(context)>

package <context.javaPackage>.server;


import com.facebook.nifty.core.NettyServerConfig;
import com.facebook.nifty.core.ThriftServerDef;
import com.facebook.swift.codec.ThriftCodecManager;
import com.facebook.swift.service.ThriftServer;
import com.facebook.swift.service.ThriftServiceProcessor;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Maps;
import com.meituan.java8train.service.HelloServiceImpl;
import org.apache.thrift.protocol.TBinaryProtocol;
import org.junit.Assert;

import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * Created with IntelliJ IDEA.
 * author: Sigma Miao
 * create on: 2017/9/16 下午5:56
 */
public class ServerCreator {

    private ExecutorService taskWorkerExecutor;
    private ThriftServer server;
    private ExecutorService bossExecutor;
    private ExecutorService ioWorkerExecutor;

    private static Map<String, Object> map = Maps.newConcurrentMap();

    public ThriftServer getServer() {
        return server;
    }

    public ServerCreator invoke() {

        map.put("HelloServiceImpl", new HelloServiceImpl());

        ThriftServiceProcessor processor = new ThriftServiceProcessor(
                new ThriftCodecManager(),
                ImmutableList.of(),
                <context.serviceImplList : { serverImpl |<_serverImplDef(serverImpl)>}; separator=",\n">
        );

        taskWorkerExecutor = Executors.newFixedThreadPool(1);

        ThriftServerDef serverDef = ThriftServerDef.newBuilder()
                .listen(12345)
                .withProcessor(processor)
                .protocol(new TBinaryProtocol.Factory())
                .using(taskWorkerExecutor)
                .build();

        bossExecutor = Executors.newCachedThreadPool();
        ioWorkerExecutor = Executors.newCachedThreadPool();

        NettyServerConfig serverConfig = NettyServerConfig.newBuilder()
                .setBossThreadExecutor(bossExecutor)
                .setWorkerThreadExecutor(ioWorkerExecutor)
                .build();

        server = new ThriftServer(serverConfig, serverDef);

        return this;

    }


    public void checkExecutorsTerminated() {
        Assert.assertTrue(bossExecutor.isTerminated());
        Assert.assertTrue(ioWorkerExecutor.isTerminated());
        Assert.assertTrue(taskWorkerExecutor.isTerminated());
    }

    public void stop() {
        System.out.println("shutdown...");
        server.close();
    }
}

>>


generatedComment(context) ::= <<
// Generated by swift-generator-ng from <context.sourceIDLPath>
>>


_serverImplDef(serverImpl) ::= <<
new <serverImpl.name>()
>>